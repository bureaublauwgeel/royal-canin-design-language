/// ----------------------------------------------------------------------

/// Buttons
///
/// Config file containing sass maps:
/// ./configuration/_buttons.scss

/// ----------------------------------------------------------------------

.button {
  position: relative;
  width: 100%;
  margin-bottom: get-spacer('small');
  white-space: nowrap;
  text-overflow: ellipsis;
  text-transform: lowercase;
  overflow: hidden;
  border: solid 2px;
  border-radius: borderRadius('button');

  @media (get-breakpoint-up('small')) {
    width: auto;
  }

  &::first-letter {
    text-transform: uppercase;
  }

  // Icon initial position
  &::after {
    @extend %rc-icon;
    position: absolute;
    right: -32px;
    top: 50%;
    transform: translateY(-50%);
  }

  // Icon transition
  &:hover:not(:disabled) {
    transition: movementSetting('transition', 'base');
    cursor: pointer;

    &::after {
      transition: movementSetting('transition', 'base');
    }
  }
}

/// -------------------
///  Button group
/// -------------------

.button-group {
  margin-bottom: get-spacer('small');

  @media (get-breakpoint-up('small')) {
    display: flex;
    justify-content: center;
    margin-right: -#{get-spacer('small')};

    & .button {
      flex: 1;
      max-width: 250px;
      margin-top: 0;
      margin-right: get-spacer('small');
    }
  }
}

/// -------------------
///  Button colour modifiers
/// -------------------

@each $colour in $buttonColours {

  $background-colour: getProperty($buttonColours, $colour, 'bg-colour');
  $text-colour: getProperty($buttonColours, $colour, 'text-colour');
  $border-colour: getProperty($buttonColours, $colour, 'border-colour');
  $icon-colour: getProperty($buttonColours, $colour, 'icon-colour');

  .button--#{nth($colour, 1)} {
    background-color: $background-colour;
    color: $text-colour;
    border-color: $border-colour;

    &::after {
      @extend .rc-icon-chevron--right--small--#{$icon-colour};
    }

    /// -------------------
    ///  States
    /// -------------------

    &:active {
      border-color: darken($border-colour, 15%);
      @if ($background-colour == 'transparent') {
        color: darken($text-colour, 15%);
      }
      @else {
        background-color: darken($background-colour, 15%);
      }
    }

    &:disabled {
      border-color: colour('secondary', 'interface');
      @if ($background-colour == 'transparent') {
        color: colour('secondary', 'interface');
      }
      @else {
        background-color: colour('secondary', 'interface');
      }
    }
  }
}

/// -------------------
///  Button size modifiers
/// -------------------

@each $size in $buttonSizes {

  $modifier: if(nth($size, 1) == 'base', '.button', '.button--#{nth($size, 1)}' );
  $padding: getProperty($buttonSizes, $size, 'padding');
  $height: getProperty($buttonSizes, $size, 'height');

  #{$modifier} {
    padding: 0 $padding;
    height: $height;

    // Button text hover position
    &:hover:not(:disabled),
    &:focus {
      padding-left: $padding - 8;
      padding-right: $padding + 8;

      // Icon hover position
      &::after {
        right: ( $padding / 2 ) - 8px;
      }
    }
  }
}