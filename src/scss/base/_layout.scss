*, *:before, *:after {
  box-sizing: inherit;
}


// Clears
%clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
}

%clearfix:after {
  clear: both;
}

.clearfix {
  @extend %clearfix;
}


section {
  position: relative;
  @extend %clearfix;
}

$grid--standard: (
        columns: 12,  // The number of columns in your grid
        gutters: 1/4, // The size of a gutter in relation to a single column
);

$grid--no-gutters: (
        columns: 12,  // The number of columns in your grid
        gutters: 0, // The size of a gutter in relation to a single column
);



///////////// Layouts Utilities ////////////////

$max-widths: (
        'large':  1240,
        'medium': 800,
        'small': 300
);

@function get-maxWidth($name) {
  @return map-get($max-widths, $name) * 1px;
}

$spacers: (
        'large':  (3rem, 3.5rem, 4rem, 4.5rem, 6rem),
        'medium': (2rem, 2.5rem, 3rem, 4rem, 4.5rem),
        'small': (.5rem, .5rem, 1rem, 1.5rem, 1.75rem)
);

@function get-spacer($size) {
  @return nth(map-get($spacers, $size), 3);
}

$spacingTypes: map-keys($spacers);
@each $spacer in $spacingTypes {
  .spacer-#{$spacer} {
    $breakpointSizes: map-keys($breakpoints);
    padding: nth(map-get($spacers, $spacer), 1);


    $counter: 1;
    @each $breakpoint in $breakpointSizes {
      @media (get-breakpoint($breakpoint)) {
        padding: nth(map-get($spacers, $spacer), $counter);
      }
      $counter: $counter + 1;
    }
  }
  .spacer-sides-#{$spacer} {
    $breakpointSizes: map-keys($breakpoints);
    padding: 0 nth(map-get($spacers, $spacer), 1);

    $counter: 1;
    @each $breakpoint in $breakpointSizes {
      @media (get-breakpoint($breakpoint)) {
        padding: 0 nth(map-get($spacers, $spacer), $counter);
      }
      $counter: $counter + 1;
    }
  }

  .spacer-bottom-#{$spacer} {
    $breakpointSizes: map-keys($breakpoints);

    margin-bottom: nth(map-get($spacers, $spacer), 1);

    $counter: 1;
    @each $breakpoint in $breakpointSizes {
      @media (get-breakpoint($breakpoint)) {
        margin-bottom: nth(map-get($spacers, $spacer), $counter);
      }
      $counter: $counter + 1;
    }
  }
}

///////////// Layouts ////////////////

$navigation-width: 240px;

.navigation + div {
  margin: get-spacer('small') auto;
  width: 90%;

  @media (get-breakpoint('small')) {
  margin: get-spacer('large') auto;
  }
}

@media ( get-breakpoint('x-large') ) {
  .navigation + div {
    padding-left: $navigation-width;
  }
}


@media ( get-breakpoint('x-large') ) {

  %layout--two-one--base {
    width: 100%;
    display: block;
    display: flex;

    & > .rc-column {
      display: inline-block;
      vertical-align: top;
      flex: 1;
    }
  }

  .layout--one-two {
    @extend %layout--two-one--base;
    & > .rc-column:nth-child(1) {
      width: 33%;
      padding-right: 2%;
    }

    & > .rc-column:nth-child(2) {
      width: 66%;
      padding-left: 2%;
    }
  }

  .layout--two-one {
    @extend %layout--two-one--base;
    & > .rc-column:nth-child(1) {
      width: 66%;
      padding-right: 2%;
    }

    & > .rc-column:nth-child(2) {
      width: 33%;
      padding-left: 2%;
    }
  }
}

%layout--two-one--base-small > .rc-column {
    & > img,
    & > figure > img {
      margin: 0 auto;
    }
}

.layout--one-centered {
  max-width: get-maxWidth('medium');
  margin-left: auto;
  margin-right: auto;
}

.layout--one-two {
  @extend %layout--two-one--base-small;
}

.layout--two-one {
  @extend %layout--two-one--base-small;
}

.vertical-align {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

%stick {
  position: absolute;
}

.stick-left {
  @extend %stick;
  left: 0;
  right: auto;
}

.stick-right {
  @extend %stick;
  right: 0;
  left: auto;
}

%show-at-large-only {
  display: none;

  @media (get-breakpoint('large')) {
    display: block;
  }
}

.show-at-large-only {
  @extend %show-at-large-only;
}

.max-width--large {
  display: block;
  max-width: get-maxWidth('large');
  margin-left: auto;
  margin-right: auto;
}