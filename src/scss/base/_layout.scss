/// ----------------------------------------------------------------------

/// Layout

/// ----------------------------------------------------------------------

.container {
  height: 100%;
  max-width: get-maxWidth('x-large');
  background: colour('brand', 'white');
  margin: auto;
  position: relative;
}  

section {
  position: relative;
  @extend %clearfix;
}

/// ------------------- 
/// Body modifier class for nav
/// -------------------

$navigation-width: 240px;

.body--fixed-side-navigation {
  margin: get-spacer('small') auto;
  margin-top: 0;
  width: 90%;
  padding-top: 100px;

  @media (get-breakpoint('small')) {
    margin: get-spacer('large') auto;
    padding-top: 0;
  }

  @media (get-breakpoint('large')) {
    padding-left: $navigation-width;
  }
}

.has-left-side-bar > [role="alert"].alert--info {
  @media (get-breakpoint('large')) {
    left: $navigation-width;
  }
}

body::before {
  clear: both;
  content: "";
  display: table;
  margin-top: -1px;
  height: 0;
}

/// ------------------- 
/// Layout Utilities
/// -------------------

%layout--two-one--base-small > .rc-column {
  & > img,
  & > figure > img {
    margin: 0 auto;
  }
}

.layout--one-two {
  @extend %layout--two-one--base-small;
}

.layout--two-one {
  @extend %layout--two-one--base-small;
}

/// ------------------- 
/// Stick elements
/// -------------------

%stick {
  position: absolute;
}

%fixed {
  position: fixed;
}

.stick-left {
  @extend %stick;
  left: 0;
  right: auto;
}

.stick-right {
  @extend %stick;
  right: 0;
  left: auto;
}

.stick-bottom {
  @extend %stick;
  bottom: 0;
  top: auto;
}

.stick-top {
  @extend %stick;
  top: 0;
  bottom: auto;
}

.fixed-bottom {
  @extend %fixed;
  bottom: 0;
  top: auto;
}

.fixed-top {
   @extend %fixed;
   top: 0;
   bottom: auto;
 }

.fixed-vertically {
  @extend %fixed;
  top: 0;
  bottom: 0;
}

.lock-top-bottom-fixed {
  position: fixed !important;
  top: get-spacer('small') !important;
  bottom: get-spacer('small') !important;
  transform: translateX(-50%) !important;
}

%show-at-large-only {
  display: none;
}

/// ------------------- 
/// Alignment Utilities
/// -------------------

.vertical-align {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

.horizontal-align {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

.center-align {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateY(-50%) translateX(-50%);
}

/// ------------------- 
/// Max-widths
/// -------------------

.max-width--large {
  max-width: get-maxWidth('large');
  margin-left: auto;
  margin-right: auto;
}

.max-width--x-large {
  max-width: get-maxWidth('x-large');
  margin-left: auto;
  margin-right: auto;
}

/// ------------------- 
/// Hide/show elements
/// -------------------

.hidden {
  display: none;

  &.visible {
    display: block;
  }
}

/// ------------------- 
/// Other Utilities
/// -------------------

.text-column-padding-right {
  @media (get-breakpoint('large')) {
    padding-right: get-spacer('medium');
  }
}

///
/// Generate spacer utility classes using the $spacers sass map.
///
/// Each utility class gets a name value from the key then loops
/// through each breakpoint set it $breakpoints and applied the
/// value of the named spacer index value === index value of
/// breakpoint. So 'small' being the first breakpoint it gets the
/// first value from the current spacer value set.
///
$spacingTypes: map-keys($spacers);
@each $spacer in $spacingTypes {

  .spacer-#{$spacer} {
    $breakpointSizes: map-keys($breakpoints);
    padding: nth(map-get($spacers, $spacer), 1);
    $counter: 1;

    @each $breakpoint in $breakpointSizes {
      @media (get-breakpoint($breakpoint)) {
        padding: nth(map-get($spacers, $spacer), $counter);
      }
      $counter: $counter + 1;
    }
  }

  .spacer-sides-#{$spacer} {
    $breakpointSizes: map-keys($breakpoints);
    padding: 0 nth(map-get($spacers, $spacer), 1);
    $counter: 1;

    @each $breakpoint in $breakpointSizes {
      @media (get-breakpoint($breakpoint)) {
        padding: 0 nth(map-get($spacers, $spacer), $counter);
      }
      $counter: $counter + 1;
    }
  }

  .spacer-bottom-#{$spacer} {
    $breakpointSizes: map-keys($breakpoints);
    margin-bottom: nth(map-get($spacers, $spacer), 1);
    $counter: 1;

    @each $breakpoint in $breakpointSizes {
      @media (get-breakpoint($breakpoint)) {
        margin-bottom: nth(map-get($spacers, $spacer), $counter);
      }
      $counter: $counter + 1;
    }
  }
}
  
///
/// Generate media queries for each breakpoint in $breakpoints sass map
///
/// @example scss - Basic Usage Sass
///
///		.small-down - only show element on small screens and down
///
/// @example scss - Basic Usage Sass - outputs @media (max-width)
///
///		.small-up - only show element on small screens and up
///
@each $breakpoint in $breakpoints {
  @media (get-breakpoint('#{nth($breakpoint, 1)}')) {
    .#{nth($breakpoint, 1)}-down {
      display: none;
    }
  }
}

@each $breakpoint in $breakpoints {
  @media (get-breakpoint-down('#{nth($breakpoint, 1)}')) {
    .#{nth($breakpoint, 1)}-up {
      display: none;
    }
  }
}