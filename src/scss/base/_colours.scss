/// ----------------------------------------------------------------------

/// Colour Classes
///
/// Config file containing sass maps: 
/// ./configuration/_colours.scss

/// ----------------------------------------------------------------------

////
/// @author James Drawneek
/// @group First 10 Digital
///

///
/// Utility classes are generated based on the allowed colours for
/// that property. Rules are defined in the config file.
///
/// @example scss
///  .text--brand1 {
///      color: colour('primary', 'brand1');
///  }
///
///


$properties: (
  ('bg', 'background-color')
  ('text', 'color')
  ('border', 'border-color')
);

@each $shortname, $prop in $properties {
  
  $style: if($shortname == 'bg', $background, if($shortname == 'text', $text, $border));

  @each $palette in $style {
    @each $color in nth($palette, 2) {
      .#{$shortname}-colour--#{$color} {
        #{$prop}: colour(nth($palette, 1), $color);
      }
    }
  }
}

/// -------------------
///  Gradients
/// -------------------

$gradients: ('horizontal', colour('primary', 'brand3'), colour('primary', 'brand4')),
            ('vertical', colour('primary', 'brand3'), colour('primary', 'brand4'));

@mixin linear-gradient($direction, $from, $to) {
  background: linear-gradient(
    is-direction($direction), $from 0%, $to 100%);
}

@function is-direction($value) {
  $conversion-map: (
    horizontal    : 90deg,
    vertical      : 180deg
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return $value;
}

@each $gradient in $gradients {
  .bg-gradient--#{nth($gradient, 1)} {
    @include linear-gradient(
      nth($gradient, 1),
      nth($gradient, 2),
      nth($gradient, 3));
  }
}