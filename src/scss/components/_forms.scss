/// ----------------------------------------------------------------------

/// Forms

/// ----------------------------------------------------------------------
/// ------------------- 
/// Forms setup
/// -------------------

$font-size: getProperty($inputSizes, 'base', 'font-size');
$font-size-transform: $font-size * .7;
$padding-x--base: getProperty($inputSizes, 'base', 'padding-x');
$padding-y--base: getProperty($inputSizes, 'base', 'padding-y');

$base-border-width: getProperty($inputEffect, 'control', 'border-width');
$base-colourFrom: getProperty($inputStates, 'base', 'colourFrom');
$base-colourTo: getProperty($inputStates, 'base', 'colourTo');

%label {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

%label-text {
  display: inline-block;
  padding: $padding-y--base $padding-x--base;
  text-indent: 1px; // So the cursor lines up nicely.
  font-weight: 500;
  transition: movementSetting('transition', 'base');
}

%input {
  display: block;
  position: relative;
  max-width: 300px;
  margin-top: get-spacer('medium'); // Allow space for label
  margin-bottom: get-spacer('small');
}

%input-inline {
  display: inline-block;
  margin-right: 1.5rem;
}

%input-stacked {
  margin-top: get-spacer('small');
}

%input-base {
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: $padding-y--base $padding-x--base;
  font-weight: 300;
  box-shadow: none;
  border: none;
  @include inputColour($base-colourFrom, $base-colourTo);
}

/// ------------------- 
/// Line animation
/// -------------------

%line-animation {
  & + .input__label::before,
  & + .input__label::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    height: 2px;
    z-index: z(default);
    transition: movementSetting('transition', 'base');
  }

  & + .input__label::before {
    width: 100%;
  }

  & + .input__label::after {
    z-index: z(default) + 1;
    width: 0;
  }

  &:focus + .input__label::after,
  &:not([value=""]) ~ .input__label::after {
    width: 100%;
  }
}

%label-animation {
  &:not([value=""]) ~ .input__label .input__label-text {
    font-size: $font-size-transform;
    transform: translateY(-2.8em);
    padding-left: 0;
  }
}

@each $input in $inputEffect {
  $line-animation: getProperty($inputEffect, $input, 'line-animation');
  $label-animation: getProperty($inputEffect, $input, 'label-animation');

  @if ($line-animation) {
    .input__#{$input} + .input__label {
      @extend %line-animation;
    }
  }
  @if ($label-animation) {
    .input__#{$input} + .input__label {
      @extend %label-animation;
    }
  }
}

/// ------------------- 
/// Labels
/// -------------------

.input__label {
  @extend %label;

  button + & {
    margin-right: 2rem;
  }
}

.input__label-text {
  @extend %label-text;
}

/// ------------------- 
/// Label modifiers
/// -------------------

.input__label--inline {
  display: inline-block;
  cursor: pointer;
}

/// ------------------- 
/// Inputs - Standard (text, email, url, number etc)
/// -------------------

.input {
  @extend %input;
}

.input__control {
  @extend %input-base;
}


/// ------------------- 
/// Input modifiers
/// -------------------

.input--inline {
  @extend %input-inline;
}

.input--stacked {
  @extend %input-stacked;
}

/// ------------------- 
/// Submit
/// -------------------

.input__submit {
  @extend .btn;
}

/// ------------------- 
/// Submit modifiers
/// -------------------

.input__submit--search {
  position: absolute;
  top: 0; 
  left: -.5rem;
  @extend .btn--icon;
  
  &::after {
    @extend .rc-icon-search--xs--iconography;
  }

  & ~ .input__control,
  & ~ .input__label .input__label-text {
    padding-left: 2rem;

    &:not([value=""]) + .input__label .input__label-text {
      padding-left: 0;
    }
  }
}

.input__submit--micro {
  position: absolute;
  top: 0; 
  right: -3rem;
  @extend .btn--action;

  &::after {
    @extend .rc-icon-arrow--xs--brand3;
  }
}

/// ------------------- 
/// Textarea
/// -------------------

.input__textarea {
  padding: $padding-y--base;
  resize: vertical;
  height: 200px;
  border-style: solid;
  border-width: $base-border-width;
  @extend %input-base;

  & + .input__label > .input__label-text {
    padding-left: $padding-y--base;
  }

  &:not([value=""]) ~ .input__label .input__label-text {
    margin-bottom: $padding-y--base;
  }
}

/// ------------------- 
/// Date
/// -------------------

.input__date {
  text-indent: 1rem;
  @extend %input-base;

  &::after {
    left: 0;
    @extend .vertical-align;
    @extend %rc-icon;
    @extend .rc-icon--interactive;
    @extend .rc-icon-calendar--xs--iconography;
  }
}

/// ------------------- 
/// Password
/// -------------------

.input__password {
  @extend %input-base;

  & ~ .input__password-toggle {
    right: -2.25rem;
    border: none;
    background-color: transparent;
    opacity: .5;
    transition: movementSetting('transition', 'base');
    @extend .vertical-align;
  
    &:hover,
    &:focus,
    &:active {
      opacity: 1;
    }
  }
}

/// ------------------- 
/// Input states
/// -------------------

.input__control:disabled {
  background-color: colour('secondary', 'interface');
  cursor: not-allowed;

  & + .input__label > .input__label-text {
    color: colour('secondary', 'text');
    opacity: .5;
  }
}

.input__validation-message {
  position: absolute;
  font-size: $font-size-transform;
  margin-top: $font-size / 2;
  display: none;
}

@each $state in $inputStates {
  $state: nth($state, 1);
  $colourFrom: getProperty($inputStates, $state, 'colourFrom');
  $colourTo: getProperty($inputStates, $state, 'colourTo');
  $icon: getProperty($inputStates, $state, 'icon');

  @if ($state != 'base') {
    .input--#{$state} {
      & > [class^="input"] {
        @include inputColour($colourFrom, $colourTo);
      }

      &::after {
        right: $padding-x--base;
        @extend .vertical-align;
        @extend %rc-icon;
        @extend .#{$icon};
      }

      & .input__validation-message {
        display: block;
      }
    }
  }
}

/// ------------------- 
/// Checkboxes & radio buttons
/// -------------------

.input__checkbox,
.input__radio {
  margin-right: .2rem;
}

%rc-checkbox-radio {
  opacity: 0;
  margin-right: -1rem;
  
  & + .input__label--inline {
    margin-left: 2rem;
    
    &::before {
      content: '';
      display: inline-block;
      border: 1px solid colour('secondary', 'interface');
      background-color: colour('primary', 'brand3');
      width: 1.5rem;
      height: 1.5rem;
      position: absolute;
      left: 0;
    }

    &::after {
      position: absolute;
    }
  }
}

/// ------------------- 
/// Checkbox modifiers
/// -------------------

.input__checkbox {
  @extend %rc-checkbox-radio;

  & + .input__label--inline::before {
    border-radius: 4px;
  }
  
  &:checked + .input__label--inline::after {
    top: -4px;
    left: -4px;
    @extend %rc-icon;
    @extend .rc-icon-tick--xs--brand1;
  }
}

/// ------------------- 
/// Radio modifiers
/// -------------------

.input__radio {
  @extend %rc-checkbox-radio;

  & + .input__label--inline::before {
    border-radius: 1.5rem;
  }
  
  &:checked + .input__label--inline::after {
    content: '';
    background-color: colour('primary', 'brand1');
    border-radius: 1rem;
    width: .6rem;
    height: .6rem;
    top: 7px;
    left: 7px;
  }
}

/// ------------------- 
/// Select inputs - choices.js
/// -------------------

.select {
  @extend %input;

  & .select__label {
    position: absolute;
    top: -1rem;
    padding: 0;
    font-size: $font-size-transform;
    @extend %label-text;
  }

  & .choices {
    margin: 0;
    border-bottom: solid 2px;
    border-color: $base-colourFrom;
    cursor: pointer;

    & .choices__list--dropdown {
      border-radius: 4px;
      margin-top: -4px;
      z-index: z(select-box) + 1;
      background-color: colour('primary', 'brand3');
      border-color: colour('secondary', 'interface');
    }
    
    & .choices__inner {
      font-size: $font-size;
      border: none;
      background: none;
      padding: .6rem $padding-x--base;
    }
    
    &::after {
      border: none;
      right: .5rem;
      z-index: z(select-box) + 1;
      @extend .vertical-align;
      @extend %rc-icon;
      @extend .rc-icon--interactive;
      @extend .rc-icon-down--xs--iconography;
    }

    &.is-open::after {
      transform: translateY(-50%) rotate(180deg);
    }
  }
}

/// ------------------- 
/// Single select
/// -------------------

[data-type="select-one"] {
  &.has-changed {
    border-color: $base-colourTo;
  }

  & .choices__list--single {
    padding: 0;
  }
}

/// ------------------- 
/// Multi select
/// -------------------

[data-type="select-multiple"] {
  & .choices__input,
  & .choices__list {
    padding: 0;
    margin: 0;
    font-size: $font-size;
  }

  &.has-changed {
    border-color: $base-colourTo;
  }
  
  & .choices__input {
    background: none;
    vertical-align: middle;
  }

  & .choices__list--multiple .choices__item {
    position: relative;
    margin: 0;
    padding: 0;
    padding-right: 5px;
    background: none;
    border: none;
    color: $base-colourTo;
    font-weight: 300;
    font-size: $font-size;

    &::after {
      content: ',';
    }
  }

  & .choices__btn {
    font-size: 0;
    background: none;
    border: none;
    
    &::after {
      transform: scale(.5);
      @extend %rc-icon;
      @extend .rc-icon-close--xs--iconography;
    }
  }
}

/// ------------------- 
/// Datepicker - native
/// -------------------

::-webkit-calendar-picker-indicator {
  color: colour('primary', 'brand1');
  cursor: pointer;
}

/// ------------------- 
/// Datepicker - pikaday.js
/// -------------------

.pika-lendar > table {
  display: table;
}

.pika-single {
  background-color: white;
  text-align: center;
}

.pika-table th,
.pika-row .is-empty {
  background-color: white;
}

.is-today .pika-button {
  color: colour('primary', 'brand1');
}

.pika-table abbr {
  display: block;
  text-align: center;
}

.pika-single .is-selected .pika-button {
  background-color: colour('tertiary', 'function');
}

.pika-button:hover {
  background-color: colour('primary', 'brand1');
}

.pika-button {
  background-color: white;
  border: none;
  display: inline-block;
}

.pika-row > td {
  padding: 0;
  text-align: center;
}